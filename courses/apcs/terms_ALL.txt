
The official resource:
https://docs.oracle.com/javase/tutorial/java/index.html

The official subset:



Terms:
===

Comments:
  // single line
  /*  multiple lines */
  /** Used for Javadoc */

  Don't put too many: Write a clear code!

// Hello-World in three ways
1. Console:
    javac Main.java   <-- Compiler
    java Main

2. IDE (Integrated Development Environment)

3. GUI


Compilation errors (wiggly red lines included) : Everything that is discovered BEFORE running the program. Syntax for example.
Run-Time errors : Discovered only when running the program.  For example, dividing by zero.
Logic errors:  The program works as you planned, but the results are wrong.

Declarations and statements are terminated with semicolon ';'
Statements can be grouped by using braces '{' and '}'

Naming:
(of variables, classes, functions)
  Can use letters (uppercase, lowercase), digits, and underscore '_'
  No name can start with a digit  (underscore is ok)
  Reserved Java names are not allowed
    note: All Java reserved words are only lowercase letter

  Convention:
    Classed start in Capital letter: BankAccount
    methods and variables start in lowerCase, using camelCase convention:  addInterest( double sum)
    Constants may use all capitals and underscore between words: SUN_DISTANCE

Class:
  One class per file.
  Same name as file.
  Keywords: class, public/private/protected (<- no need to know protected), static, import, final

  Constructor(s):
    same name as class
    not return type specified
    can have multiple constructors

  Fields, aka Instance variables
  Methods, aka functions

  Object: An instance of the class.

  Accessors /  Selectors
  Modifiers /  Mutators


toString()
  Converts the object to a string


Reserved words (keywords). About 53 of them. Examples:
public, private, static, void, int, double

Need one and only:
  public static void main(String[] args)
  This is where the program starts.


===

Primitive types
INTEGER: byte, short, *int*, long
FLOATING POINT: float, *double*
BOOLEAN:  *boolean*
CHARACTER: char

Only int, double, boolean are tested in the AP exam.
Specifically, char is not!!


String is NOT primitive type. An Object.

(different #bytes in memory)
int:
  In Java, int is 4 Bytes. Max value: 2^31-1 Min value: -2^31. 2's complement.
  Integer arithmetic
  %  modulus (same rank as / and *)
  pre/post ++
  +=  : compound assignment

boolean:
  true, false
  1 Byte

char:
  1 Byte!
  ASCII code: 256 possible values.


---

CPU, ALU
BIT - Binary digIT
Byte = 8  bits
1K = 1024 = 2^10 ~= 1e3
1M = 2^20        ~= 1e6
1G = 2^30        ~= 1e9

Word: Depending on OS/CPU. The basic unit of bits processed by the CPU.

---

casting:
Type of result depends only on the type of operands.
 a / (double)b
Only two casts tested: (int) and (double)

Promoting data types:    double + int -->  double


---
Relational operators:
==, !=, <,<=, >, >=

---
Arithmetic operators:
+ , - , * , / , %

---
Assignment operators:
 = , += , -=, *=, /=, %=

---
String operator:
String concatenation: +

---
Logical operators:    ||  ,   &&,   !

DeMorgan's law:    (prove by Truth table)
!(P && Q) = !P || !Q
!(P || Q) = !P && !Q

=====
Not part of the AP operators:
bitwise , shifts >> or  <<
conditional ()? :


---

flow control:

if ( condition_boolean ) {

}

while ( condition_boolean ) {

}

Patterns:
int idx=0;
while (idx<str.length()) {
  // check something
  String tmp = str.substring(idx,idx+1);

  ....

  idx++;
}


for ( initial_statement  ; condition_boolean ;  final_statement ) {

}
translates to:
initial_statement  ;
while ( condition_boolean) {

final_statement;
}


----

Strings (we will visit again!)
a class, not primitive type!!
 length()
 substring(from, upto) <== UpTo , not including!!
 charAt(index)   <== returns char!
 compareTo(str2)  <== lexicographic order
 equals(str2)     <== Boolean
 + : concatenation

DON'T do str1==str2 !
compares address of object, not content

String literals/escape sequence:
"\n", "This is a quote:\"Hi there\"."

---
Misc.
Constants:
private static final int SIDES=5;  <== can be initialized in constructor
private final int sides;  <== can be initialized in constructor

Literlas (aka literal constants):
 "Hello"
 5.0
 7
 etc.

Fields, local variables and parameters, and scope:
Fields are class variables: Defined outside of any method
    a. can use public/private
    b. get default value!
    c. Scope: Whole class
Local variables: within a method
     a. CANNOT use public/private
     b. do not get default value! Have to be initialized BEFORE used
     c. Scope: From where defined to end of block.
parameters: defined in the header of method, and are much like local variables



===
Base converter ==> ASCII of char,
Peeling.
Binary ,hex, decimal
Integer is 4 bytes, plus and minus, so:
-2^31 to 2^31-1
Byte: char: 0 to 255


Boolean
true , false
if (condition)
{

} else {

}

Things you do not need to master, just know they exist:
switch()
(...) ? oneCase : twoCase

===

Patterns:
1. Go over elements of a String:
for (int i=0; ii<str.length() ; i++) {
  String tmp = str.substring(i,i+1) ;

}

2. Check neighbouring elements:
WATCH out for EDGE cases.
for (int i=0; ii<str.length() ; i++) {
  if (i>0 && i<str.length()-1)
      do_something;
  if (i==0)
      do_something_else;
  if (i==str.length()-1)
      do_something_totally_else;
}

3. Going backward on a string:
   for (int i=str.length() ; i>=0 ; i--)

4. Going in jumps:
   for (int i=0; i<10; i+=2)

5. indexOf is jumping around --> Works well with while()
6. for_loops are for going on all elements, one by one.

* COMMENTing not working code. Don't destroy.

===

Variables:
Local variables - Within a method
Instance variables - Non static fields of a class
Class variables - Static fields
Parameters - Values to methods

Scope of variables
===
Methods:

same naming rules as variables. Common: camelNotation

[Modifier: public, private]  returnType methodName  ( [parameterList] ) [exceptionList] { [methodBody] }
Minimal:  returnType methodName  ( )  {  }


Method signature:  Name + argumentList  . NOT return type.
Overloading methods: different by the type and number of arguments.
public void draw(String S){}
public void draw(int i){}
public void draw(double d){}


Pass by value - Switch program


===
SPECIAL METHODS
  public static void main(String[] args) in applications
  init() in JFrames (though you won't need to write JFrames on final)
  paint() in JFrames
  repaint()--used to invoke paint() in JFrames
GUI TERMS
  EVENTS (clicks, keypresses, etc.)
  LISTENER (MouseListener, MouseMotionListener, ActionListener)
  (need to know what they do for final, but won't need to write code with them)


===
Class


this
Static methods/variables : Class .vs. instance .  Account number.

===
Inheritance

OOP: Encapsulation
Keyword: extends
Keyword: implements
super: dot notation
super: constructor

Methods:
  New
  Overloading
  Reusing the super

Interface class:
   Comparable
      Return value of -1,1,0

Abstract class:





Recursion
  Base case
  Recursive call


===

ARRAYS AND ARRAY-LIKE STRUCTURES
  ARRAYS (e.g., double[] testScores)
  MULTIDIMENSIONAL ARRAYS (e.g., boolean[][] isAlive)
  ARRAYLISTS (e.g., ArrayList<Object> a)


=== End ===
